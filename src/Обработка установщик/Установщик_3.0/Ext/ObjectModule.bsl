Процедура ОпределитьТекущуюВерсию() Экспорт    
	
	//-------------------------------------------------------------------------------------------
	//-------------------------ЗАПОЛНИТЬ СВОИ ДАННЫЕ НАЧАЛО
	ИмяПродукта = "ЛДО"; //имя расширения 
	ИспользоватьТокен = Истина;
	
	//прод
	СерверОбновления = "dev1";
	ИмяБазы = "MSRVCD"; 
	БезопасноеСоединение = Истина;
	
	Логин = "webservice"; Пароль = "12345";
	
	//-------------------------ЗАПОЛНИТЬ СВОИ ДАННЫЕ КОНЕЦ
	//-------------------------------------------------------------------------------------------
	
  
	
	//заполняем Токен
	Если ОбработкаПодключена Тогда 
		ХранилищеНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ХранилищеНастроек");
		Настройки = ХранилищеНастроек.Получить();  
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда 
			Если Настройки.Свойство("Токен") Тогда 
				Токен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Токен"); 
			КонецЕсли;
		КонецЕсли;      
	КонецЕсли;

	
	ТекущаяВерсия1С = Метаданные.Версия; 
	ИмяКонфигурации = Метаданные.Имя;
	МассивРасширений = РасширенияКонфигурации.Получить(Новый Структура("Имя",ИмяПродукта));
	Если МассивРасширений.Количество() = 0 Тогда  
	    ТекущаяВерсияРасширения = "0";
	Иначе
		ТекущаяВерсияРасширения = МассивРасширений[0].Версия;
	КонецЕсли; 
	
	//версия установщика
	ТекущаяВерсияУстановщика = СведенияОВнешнейОбработке().Версия;   
	ОбновитьВерсиюУстановщикаСервер(ТекущаяВерсияУстановщика, Истина); //проверяем наличие обновления
	
КонецПроцедуры

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.3.2.48");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "3.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь; 
	
	ИмяОбработки = ЭтотОбъект.Метаданные().Имя; 
    СинонимОбработки = ЭтотОбъект.Метаданные().Синоним; 
    СинонимОбработки = ?(ЗначениеЗаполнено(СинонимОбработки),СинонимОбработки, ИмяОбработки); 
	
	ПараметрыРегистрации.Вставить("ИмяОбъекта", ИмяОбработки); 
	ПараметрыРегистрации.Наименование = СинонимОбработки;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Обновить вручную: Ecwid синхронизация'");
	Команда.Идентификатор = "ФормаНастройки";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Автоматическое обновление расширения: Ecwid синхронизация'");
	Команда.Идентификатор = "АвтоОбновлениеРасширения";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "АвтоОбновлениеРасширения" Тогда
		
		ЗаписьЖурналаРегистрации("ДополнительнаяОбработкаСсылка",,,,"ДополнительнаяОбработкаСсылка:"+ПараметрыВыполнения.ДополнительнаяОбработкаСсылка); 
		
		Ссылка = ПараметрыВыполнения.ДополнительнаяОбработкаСсылка;
		ХранилищеНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХранилищеНастроек");
		Настройки = ХранилищеНастроек.Получить();
		ПроверитьОбновитьРасширениеАвтоматически(Настройки, ПараметрыВыполнения.РезультатВыполнения); 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьОбновитьРасширениеАвтоматически(Настройки, РезультатВыполнения)
	
	АвтоОбновление = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Автообновление");
	Токен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки, "Токен");
	
	ЗаписьЖурналаРегистрации("Установщик",,,,"Автообновление:"+Автообновление); 
	ЗаписьЖурналаРегистрации("Установщик",,,,"Токен:"+Токен);  
	
	Если Не ЗначениеЗаполнено(АвтоОбновление) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ АвтоОбновление Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьТекущуюВерсию();
	ЗаполнитьДоступныеВерсии();
	
	Для Каждого Стр Из ВерсииПродукта Цикл
		Если Стр.ДоступноОбновление Тогда 
			
			АдресХранилища = СкачатьВерсиюПродуктаСервер(Стр.ВерсияПродукта);
			
			Если АдресХранилища = Неопределено Тогда	
				Возврат;	
			КонецЕсли;  
			
			МассивФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);  
			Для Каждого Эл Из МассивФайлов Цикл
				Расширение = ПолучитьРасширениеФайла(Эл.ИмяФайла);  
				АдресДД = ПоместитьВоВременноеХранилище(Эл.ДвоичныеДанные);
				Если НРег(Расширение) = "cfe" Тогда 
					УстановитьВерсиюПродуктаНаСервере(АдресДД);	
				КонецЕсли; 	
			КонецЦикла; 			
		
		КонецЕсли;
	КонецЦикла;  
	
	//установщик
	ОбновитьВерсиюУстановщикаСервер(ТекущаяВерсияУстановщика);
		
КонецПроцедуры

Процедура УстановитьВерсиюПродуктаНаСервере(АдресХранилища) Экспорт
	
	МассивРасширений = РасширенияКонфигурации.Получить(Новый Структура("Имя",ИмяПродукта));
	
	Если МассивРасширений.Количество() = 0 Тогда
		ТекущееРасширение = РасширенияКонфигурации.Создать();
	Иначе	
		ТекущееРасширение = МассивРасширений[0];
	КонецЕсли;  
	
	ТекущееРасширение.БезопасныйРежим = Ложь;
	ТекущееРасширение.Записать(ПолучитьИзВременногоХранилища(АдресХранилища));
	 
КонецПроцедуры

#Область РаботаСHTTP

Процедура ЗаполнитьДоступныеВерсии() Экспорт
	
	ВерсииПродукта.Очистить();
	Соединение = ПолучитьHTTPСоединение();
	Запрос = Новый HTTPЗапрос("/"+ИмяБазы+"/hs/MSRV/getversions/"+ИмяПродукта+"/"+ИмяКонфигурации+"/"+ТекущаяВерсия1С,ПолучитьHTTPЗаголовки());
	Результат = Соединение.Получить(Запрос);//GET
	
	Если Результат.КодСостояния=200 Тогда
		ЧтениеJson = Новый ЧтениеJson;
		ЧтениеJson.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		Массив = ПрочитатьJSON(ЧтениеJson,,"ДатаВыпуска");
		
		Для Каждого Элемент Из Массив Цикл
			НовСтр = ВерсииПродукта.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Элемент);
		КонецЦикла;                                
		ВерсииПродукта.Сортировать("ДатаВыпуска Убыв");
		ОтметитьДоступныеДляТекущейКонфигурации();
	Иначе
		Сообщить("Не удалось получить доступные версии продукта: "+Результат.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
КонецПроцедуры    

Функция ПолучитьHTTPСоединение()  
	
	Если БезопасноеСоединение Тогда 
		Возврат Новый HTTPСоединение(СерверОбновления,,Логин,Пароль,,300,Новый ЗащищенноеСоединениеOpenSSL());
	Иначе 
		Возврат Новый HTTPСоединение(СерверОбновления,,Логин,Пароль);
	КонецЕсли;
	
КонецФункции   

Функция ПолучитьHTTPЗаголовки()
	Заголовки = Новый Соответствие;
    Заголовки.Вставить("Host",СерверОбновления);
    Заголовки.Вставить("Content-Type","application/json;charset=utf-8");
	Заголовки.Вставить("Cache-Control","no-cache");
	Заголовки.Вставить("Keep-Alive","timeout=30, max=100;");
	Заголовки.Вставить("Connection","keep-alive");
	Возврат Заголовки;
КонецФункции

Процедура ОтметитьДоступныеДляТекущейКонфигурации() 
	
	Для Каждого Стр Из ВерсииПродукта Цикл
		Стр.Скачать = "Скачать";
		
		Если (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсия1С,Стр.ВерсияКонфигурацииОт) >= 0 ИЛИ Стр.ВерсияКонфигурацииОт="")
			И (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Стр.ВерсияКонфигурацииДо,ТекущаяВерсия1С) >= 0 ИЛИ Стр.ВерсияКонфигурацииДо="") Тогда 
			Стр.Установить = "Установить";
		КонецЕсли;
					
	КонецЦикла; 
	
	Для Каждого Стр Из ВерсииПродукта Цикл
		Если Стр.Установить = "Установить" И СравнитьВерсии(Стр.ВерсияПродукта,ТекущаяВерсияРасширения)>0 Тогда 
			Стр.ДоступноОбновление = Истина;
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры  

Функция СкачатьВерсиюПродуктаСервер(НомерВерсииПродукта) Экспорт
	
	Соединение = ПолучитьHTTPСоединение();
	Запрос = Новый HTTPЗапрос("/"+ИмяБазы+"/hs/MSRV/downloadversion/"+ИмяПродукта+"/"+НомерВерсииПродукта+"/"+?(Токен="","token",Токен),ПолучитьHTTPЗаголовки());
	Ответ = Соединение.Получить(Запрос);//GET

	АдресХранилища = Неопределено;
	Если Ответ.КодСостояния=200 Тогда 
		СообщениеMultipart = ПрочитатьСообщениеMultipart(Ответ.Заголовки, Ответ.ПолучитьТелоКакДвоичныеДанные());
		МассивФайлов = СообщениеMultipart.МассивФайлов;
		АдресХранилища = ПоместитьВоВременноеХранилище(МассивФайлов);	
	Иначе
		Сообщить("Не удалось скачать версию продукта. Код ошибки: "+Ответ.КодСостояния+". "+Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат АдресХранилища;
	
КонецФункции     

Процедура ОбновитьВерсиюУстановщикаСервер(ВерсияУстановщика, ТолькоПроверить = Ложь) Экспорт
	
	Соединение = ПолучитьHTTPСоединение();
	Запрос = Новый HTTPЗапрос("/"+ИмяБазы+"/hs/MSRV/checksetupupdate/"+ИмяПродукта+"/"+ВерсияУстановщика+"",ПолучитьHTTPЗаголовки());
	Ответ = Соединение.Получить(Запрос);//GET

	Если Ответ.КодСостояния=200 Тогда
		СообщениеMultipart = ПрочитатьСообщениеMultipart(Ответ.Заголовки, Ответ.ПолучитьТелоКакДвоичныеДанные());
		МассивФайлов = СообщениеMultipart.МассивФайлов;
		АдресХранилища = ПоместитьВоВременноеХранилище(МассивФайлов);	
	Иначе
		Сообщить("Не удалось обновить установщик продукта. Код ошибки: "+Ответ.КодСостояния+". "+Ответ.ПолучитьТелоКакСтроку());  
		Возврат;
	КонецЕсли;
	
	ДоступноОбновлениеУстановщика = МассивФайлов.Количество()>0;
	
	Если ТолькоПроверить Тогда 
		Возврат;
	КонецЕсли;
	
		
	Сведения = СведенияОВнешнейОбработке();
	ОбработкаОбновления = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта",Сведения.ИмяОбъекта);   
	
	Для Каждого Эл Из МассивФайлов Цикл
		Расширение = ПолучитьРасширениеФайла(Эл.ИмяФайла);  
		АдресДД = ПоместитьВоВременноеХранилище(Эл.ДвоичныеДанные);
		Если НРег(Расширение) = "epf" Тогда 
			
			Если ЗначениеЗаполнено(ОбработкаОбновления) Тогда  
				ПараметрыОбработки = Новый Структура;
				ПараметрыОбработки.Вставить("Имя",Сведения.ИмяОбъекта); 
				ПараметрыОбработки.Вставить("ДвоичныеДанные",Эл.ДвоичныеДанные);
				ПараметрыОбработки.Вставить("Ссылка",ОбработкаОбновления);
				ПараметрыОбработки.Вставить("Вид","ОБРАБОТКА"); 
				//обновляем только двоичные данные, версию и информацию, остальное остается как было
				ПараметрыОбработки.Вставить("Сведения",Новый Структура("Наименование, БезопасныйРежим, Версия, Информация",Сведения.Наименование,Сведения.БезопасныйРежим,СообщениеMultipart.Структура.Версия,СообщениеMultipart.Структура.Информация));
				ПараметрыОбработки.Вставить("ИмяФайла",Эл.ИмяФайла);
				ПараметрыОбработки.Вставить("ИмяМакета","");
								
				ЗарегистрироватьОбработку(ПараметрыОбработки);
			КонецЕсли;
			
		КонецЕсли; 	
	КонецЦикла; 
	
КонецПроцедуры  

Функция ПрочитатьСообщениеMultipart(заголовки, тело)
	
	МассивФайлов = Новый Массив;
	Разделитель = ПолучитьРазделительСоставногоСообщения(заголовки);
	Маркеры = Новый Массив();
	Маркеры.Добавить("==" + Разделитель);
	Маркеры.Добавить("==" + Разделитель + Символы.ПС);
	Маркеры.Добавить("==" + Разделитель + Символы.ВК);
	Маркеры.Добавить("==" + Разделитель + Символы.ВК + Символы.ПС);
	Маркеры.Добавить("==" + Разделитель + "==");               
     
	ЧтениеДанных = Новый ЧтениеДанных(Тело);               
	// Переходим к началу первой части
	ЧтениеДанных.ПропуститьДо(Маркеры);
	// Далее в цикле читаем все части
	Пока Истина Цикл
		Часть = чтениеДанных.ПрочитатьДо(Маркеры);
		Если Не Часть.МаркерНайден Тогда
			// Неправильно сформированное сообщение
			Прервать;
		КонецЕсли;
		ЧтениеЧасти = Новый ЧтениеДанных(Часть.ОткрытьПотокДляЧтения());
		ЗаголовкиЧасти = ПрочитатьЗаголовки(ЧтениеЧасти);
		ИмяЧасти = ПолучитьИмяСообщения(ЗаголовкиЧасти); 
		
		Если ИмяЧасти = "file" Тогда 
			ИмяФайла = ПолучитьИмяФайла(ЗаголовкиЧасти);
			МассивФайлов.Добавить(Новый Структура("ИмяФайла, ДвоичныеДанные",ИмяФайла,ЧтениеЧасти.Прочитать().ПолучитьДвоичныеДанные()));    
		ИначеЕсли ИмяЧасти = "structure" Тогда
			ТекстXML = чтениеЧасти.ПрочитатьСимволы();
			Структура = XMLЗначение(Тип("ХранилищеЗначения"),ТекстXML).Получить();
		КонецЕсли;
		
		Если Часть.ИндексМаркера = 4 Тогда
			// Прочитали последнюю часть
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Структура, МассивФайлов",Структура, МассивФайлов);
	
КонецФункции   

Функция ПрочитатьЗаголовки(Чтение)
	Заголовки = Новый Соответствие();
	Пока Истина Цикл
		Стр = Чтение.ПрочитатьСтроку();
		Если Стр = "" Тогда
			Прервать;
		КонецЕсли;
		Части = СтрРазделить(Стр, ":");
		ИмяЗаголовка = СокрЛП(Части[0]);
		Значение = СокрЛП(Части[1]);
		Заголовки.Вставить(ИмяЗаголовка, Значение);
	КонецЦикла;
	Возврат Заголовки;
КонецФункции

// Поиск строки-разделителя составного сообщения из заголовков
// Предполагается, что значение разделителя задается в заголовке
// Content-Type в следующем виде:
// Content-Type: multipart/form-data; boundary=<Разделитель> 
Функция ПолучитьРазделительСоставногоСообщения(Заголовки)
	ТипСодержимого = Заголовки.Получить("Content-Type");
	Свойства = СтрРазделить(ТипСодержимого, ";", Ложь);
	Граница = Неопределено;
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);
		Если ИмяСвойства <> "boundary" Тогда
			Продолжить;
		КонецЕсли;
		Граница = СокрЛП(Части[1]);    
		Прервать;
	КонецЦикла;
	Возврат Граница;
КонецФункции

// Имя сообщения получается из заголовка
// Content-Disposition
// Content-Disposition: form-data; name=<Имя сообщения>
Функция ПолучитьИмяСообщения(Заголовки)
	ОписаниеЗаголовка = Заголовки.Получить("Content-Disposition");
	Свойства = СтрРазделить(ОписаниеЗаголовка, ";", Ложь);
	Имя = Неопределено;
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);               
		Если ИмяСвойства <> "name" Тогда
			Продолжить;
		КонецЕсли;       
		Имя = СокрЛП(Части[1]);       
		Прервать;
	КонецЦикла;
	Возврат Имя;
КонецФункции

// Имя сообщения получается из заголовка
// Content-Disposition
// Content-Disposition: form-data; name=<Имя сообщения>
Функция ПолучитьИмяФайла(Заголовки)
	ОписаниеЗаголовка = Заголовки.Получить("Content-Disposition");
	Свойства = СтрРазделить(ОписаниеЗаголовка, ";", Ложь);
	Имя = Неопределено;
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);               
		Если ИмяСвойства <> "filename" Тогда
			Продолжить;
		КонецЕсли;       
		Имя = СокрЛП(Части[1]);       
		Прервать;
	КонецЦикла;
	Возврат Имя;
КонецФункции


#КонецОбласти

#Область Служебные  

//см. ДополнительныеотчетыИОбработки.ЗарегистрироватьОтчетыИОбработки
Процедура ЗарегистрироватьОбработку(ПараметрыОбработки)
	
	// Обновление/добавление.
	Если ПараметрыОбработки.Ссылка = Неопределено Тогда
		СправочникОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		СправочникОбъект.ИспользоватьДляФормыОбъекта = Истина;
		СправочникОбъект.ИспользоватьДляФормыСписка  = Истина;
		СправочникОбъект.Ответственный               = Пользователи.ТекущийПользователь();
	Иначе
		СправочникОбъект = ПараметрыОбработки.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЭтоОтчет      = (ПараметрыОбработки.Вид = "ОТЧЕТ");
	АдресДанных   = ПоместитьВоВременноеХранилище(ПараметрыОбработки.ДвоичныеДанные);
	Менеджер      = ?(ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
	ИмяОбъекта = Менеджер.Подключить(АдресДанных, , Истина,
	ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	ВнешнийОбъект = Менеджер.Создать(ИмяОбъекта);
	
	ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
	ОбработкаСведения = ПараметрыОбработки.Сведения;
	Если ОбработкаСведения.Наименование = Неопределено ИЛИ ОбработкаСведения.Информация = Неопределено Тогда
		Если ОбработкаСведения.Наименование = Неопределено Тогда
			ОбработкаСведения.Наименование = ВнешнийОбъектМетаданные.Представление();
		КонецЕсли;
		Если ОбработкаСведения.Информация = Неопределено Тогда
			ОбработкаСведения.Информация = ВнешнийОбъектМетаданные.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СправочникОбъект, ОбработкаСведения, "Наименование, БезопасныйРежим, Версия, Информация");
	
	// Выгрузка настроек команд, которые переопределяются администратором.
	ПоискЗаданий = Новый Соответствие;
	Для Каждого СтараяКоманда Из СправочникОбъект.Команды Цикл
		Если ЗначениеЗаполнено(СтараяКоманда.РегламентноеЗаданиеGUID) Тогда
			ПоискЗаданий.Вставить(ВРег(СтараяКоманда.Идентификатор), СтараяКоманда.РегламентноеЗаданиеGUID);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("АдресДанныхОбработки", АдресДанных);
	ПараметрыРегистрации.Вставить("ЭтоОтчет", ЭтоОтчет);
	ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Ложь);
	ПараметрыРегистрации.Вставить("ИмяФайла", ПараметрыОбработки.ИмяФайла);
	ПараметрыРегистрации.Вставить("ОтключатьПубликацию", Ложь);
	ПараметрыРегистрации.Вставить("Версия", ОбработкаСведения.Версия); 
	ПараметрыРегистрации.Вставить("Информация", ОбработкаСведения.Информация); 
	
	СправочникОбъект.ИмяОбъекта = Неопределено;
	СправочникОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	СправочникОбъект.Вид        =  Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	
	
	//Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
	//Если Не Результат.Успех Тогда
	//	ЗаписьЖурналаРегистрации(
	//	,
	//	УровеньЖурналаРегистрации.Ошибка,
	//	Метаданные.ОбщиеМакеты.Найти(ПараметрыОбработки.ИмяМакета),
	//	,
	//	Результат.ТекстОшибки);
	//	Возврат;
	//КонецЕсли;
	
	СправочникОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ПараметрыОбработки.ДвоичныеДанные);
	СправочникОбъект.ИмяОбъекта         = ВнешнийОбъектМетаданные.Имя;
	СправочникОбъект.ИмяФайла           = ПараметрыОбработки.ИмяФайла;
	
	// Очистка и загрузка новых команд.
	Для Каждого Команда Из СправочникОбъект.Команды Цикл
		РегламентноеЗаданиеGUID = ПоискЗаданий.Получить(ВРег(Команда.Идентификатор));
		Если РегламентноеЗаданиеGUID <> Неопределено Тогда
			Команда.РегламентноеЗаданиеGUID = РегламентноеЗаданиеGUID;
			ПоискЗаданий.Удалить(ВРег(Команда.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неактуальных заданий.
	Для Каждого КлючИЗначение Из ПоискЗаданий Цикл
		Попытка
			Задание = РегламентныеЗаданияСервер.Задание(КлючИЗначение.Значение);
			Задание.Удалить();
		Исключение
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,, СправочникОбъект.Ссылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Регламентное задание ""%1"" не было удалено по причине:
			|%2'"),
			КлючИЗначение.Значение,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
	КонецЦикла;
	
	Если ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(СправочникОбъект.Вид) Тогда
		ТаблицаОбъектовМетаданных = ДополнительныеОтчетыИОбработки.ПодключенныеОбъектыМетаданных(СправочникОбъект.Вид);
		Для Каждого СтрокаТаблицы Из ТаблицаОбъектовМетаданных Цикл
			РазделСсылка = СтрокаТаблицы.Ссылка;
			СтрокаРаздела = СправочникОбъект.Разделы.Найти(РазделСсылка, "Раздел");
			Если СтрокаРаздела = Неопределено Тогда
				//СтрокаРаздела = СправочникОбъект.Разделы.Добавить();
				//СтрокаРаздела.Раздел = РазделСсылка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ОписаниеНазначения Из ОбработкаСведения.Назначение Цикл
			ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ОписаниеНазначения);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбъектНазначенияСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			СтрокаНазначения = СправочникОбъект.Назначение.Найти(ОбъектНазначенияСсылка, "ОбъектНазначения");
			Если СтрокаНазначения = Неопределено Тогда
				СтрокаНазначения = СправочникОбъект.Назначение.Добавить();
				СтрокаНазначения.ОбъектНазначения = ОбъектНазначенияСсылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// АПК:1327-выкл Механизм обновления дополнительных отчетов и обработок из метаданных.
	// Конкурентной работы не предполагается.
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, , Истина);
	// АПК:1327-вкл
	
КонецПроцедуры

 Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Версия2 = СтрРазделить(Строка2, ".");
	КоличествоРазрядов1 = СтрЧислоВхождений(СтрокаВерсии1,".");	
	КоличествоРазрядов2 = СтрЧислоВхождений(СтрокаВерсии2,"."); 
	КоличествоРазрядов = Мин(КоличествоРазрядов1,КоличествоРазрядов2);
	Результат = 0;
	Для Разряд = 0 По КоличествоРазрядов Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;   
	
КонецФункции   

Функция ПолучитьРасширениеФайла(ИмяФайла)

	ПозицияПоследнейТочки = 0;
	РасширениеФайла = ИмяФайла;

	Пока Истина Цикл 
		ПозицияПоследнейТочки = Найти(РасширениеФайла, "."); 
		Если ПозицияПоследнейТочки = 0 Тогда   
			Прервать; 
		Иначе   
			РасширениеФайла = Сред(РасширениеФайла, ПозицияПоследнейТочки + 1)
		КонецЕсли;
	КонецЦикла;

	Возврат ?(РасширениеФайла = ИмяФайла, "", РасширениеФайла);

КонецФункции  

#КонецОбласти

